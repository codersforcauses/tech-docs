{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coders for Causes Tech Docs","text":"<p>A place for CFC committee to pass down their knowledge for all things technical. It is primarily intended to be read by the tech lead of the committee (or project) as a sort of handover, but everyone should read it! Please do not take the things written here as gospel. These are just the experiences of past committee. Think critically and adapt to the times, but recognise the past! The world of tech is forever changing.</p>"},{"location":"#background","title":"Background","text":"<p>As a student-run club, committee rotates out new members every year. When committee members leave, a wealth of knowledge is lost -- especially technical knowledge. In addition, a lot of knowledge from elders is passed down in informal conversation. This can lead to the same mistakes being repeated year after year. I hope that this documentation will serve as a place for committee members to pass down their knowledge for things like running workshops and projects.</p>"},{"location":"#why-here","title":"Why here?","text":"<p>Firstly, a majority of CFC's code is open-source. However, when it comes to running things like projects smoothly, a lot of the gruntwork is done behind closed doors. In order to continue the tradition of \"working with the garage door up\", this documentation is intentionally public. That said, not everything should be available to the public, and that's where our Notion comes into play.</p> <p>Secondly, maintaining the level of technical proficiency of committee is an ongoing challenge. Whilst soft skills and committment are the most important to having a strong committee, technical skills are a very close second. We need technical people to run workshops and lead projects so we can inspire the next generation. So as a skill check, maintaining this documentation that's located on GitHub instead of Notion is a good start .</p>"},{"location":"contributions/","title":"Contributions","text":"<p>Hi! We are happy that you thought of contributing! If you have any suggestions or issues, please raise it here. I would be happy if you could provide pull requests, if you know how to do it here.</p>"},{"location":"contributions/#structure","title":"Structure","text":""},{"location":"contributions/#folder-structure","title":"Folder Structure","text":"<p>The structure of this repo is as follows:</p> <pre><code>\u251c\u2500\u2500 docs                    // Folders for documentation\n\u2502   \u251c\u2500\u2500 CNAME\n\u2502   \u251c\u2500\u2500 contributions.md\n\u2502   \u251c\u2500\u2500 deployment_and_automated_site_deployment.md\n\u2502   \u251c\u2500\u2500 flavoured_markdown.md\n\u2502   \u251c\u2500\u2500 images              // Assets\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 writing_markdown.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml              // MkDocs Configuration\n\u251c\u2500\u2500 overrides\n\u2502   \u2514\u2500\u2500 partials\n\u2502       \u2514\u2500\u2500 footer.html\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"contributions/#development","title":"Development","text":""},{"location":"contributions/#ye-olde-way","title":"Ye olde way","text":"<pre><code>python -m venv .venv\n./.venv/Scripts/activate\npip install -r requirements.txt\nmkdocs serve\n</code></pre>"},{"location":"contributions/#docker","title":"Docker","text":"<pre><code>docker compose up\n</code></pre>"},{"location":"contributions/#devcontainer","title":"\u2728Devcontainer \u2728","text":"<p>Install the devcontainer extension in VSCode and reopen the project a devcontainer.</p>"},{"location":"contributions/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Deploy in github pages</li> <li><code>pip freeze &gt; requirements.txt</code> - Generate a requirements.txt file</li> </ul>"},{"location":"contributions/#web-documentation-configuration","title":"Web Documentation Configuration","text":"<p>For full documentation visit:</p> <ul> <li>mkdocs.org for the generic MkDocs</li> <li>PyMdown Extensions for the different extensions that are installed</li> <li>MkDocs Material for the customisation of the web server documentation.</li> </ul>"},{"location":"projects/","title":"Projects","text":"<ul> <li>Determining Clients</li> <li>Planning a Project</li> <li>During Projects</li> <li>Handover</li> </ul>"},{"location":"projects/clients/","title":"Determining Clients","text":"<p>Consider the (unlikely) scenario that we have a number of prospective clients to choose from for a project period. Which projects do you take? Whilst the early stages are mostly in the domain of the President/VP/Secretary, technical input quickly becomes necessary.</p>"},{"location":"projects/clients/#prospective-client-guide","title":"Prospective Client Guide","text":"<p>See the Notion page for evaluating a client.</p> <p>Being a good tech lead is not just about being the leetiest coder in the group, you must be able to communicate your thoughts too! When speaking to clients, you take on the role of an advisor -- your job is to take in the lumps of information that the client provides, and turn it into a clearly-defined structure. When sitting in a client meeting, ask yourself:</p> <ul> <li>Is what they want realistic?</li> <li>Would referring them to an existing service be better?</li> <li>Do we have the knowledge?</li> <li>Do we have the time?</li> <li>How flexible is the client?</li> </ul> <p>Don't be afraid to say no to the client! If you think something is difficult to implement, you need to explain why in a simple manner.</p>"},{"location":"projects/during/","title":"During Projects","text":"<p>See the Notion page for managing project volunteers.</p> <p>You've got a rough plan, and the projects have started. I like to think of this stage as a marathon because your goal is to maintain pace (or velocity in the agile world ). This means:</p> <ol> <li>Stalk your inbox for new PRs and review them as soon as possible. We don't want volunteers to feel limited and lose interest.</li> <li>Monitor the progress of issues. Make new ones when needed. This is where the planning comes in. The more planning you've done the less you need to think about what's next. Most projects typically follow the same progression of things to do. So if in doubt, you can simply look at past projects for ideas.</li> <li>Have your regular client meetings. Update them on your progress. And once again, don't</li> </ol>"},{"location":"projects/during/#engagement","title":"Engagement","text":"<p>Prizes work surprisingly well.</p>"},{"location":"projects/handover/","title":"Handover","text":"<p>TODO</p>"},{"location":"projects/handover/#deployment","title":"Deployment","text":""},{"location":"projects/planning/","title":"Planning a Project","text":"<p>So you've decided on a project and you've nominated yourself to be the tech lead. You might've sat in on the original client meeting, or you might not have. Fact remains you should plan a follow-up meeting as soon as possible. The earlier you start, the better and the more planning you do the better.</p>"},{"location":"projects/planning/#first-client-meeting","title":"First Client Meeting","text":"<p>Continuing on from the previous page, you now need to think on a deeper level. The Notion Page written by @junhyap already gives a great high level overview, so here are some questions to ask and some words of advice:</p> <ul> <li>Write everything out. Make sure both you and the client are on the same page. In the same respect, repeat back to the client your interpretation of what they said. Ensure no misunderstandings -- you don't have time for that.</li> <li>What are your assumptions? What are their assumptions?</li> <li>What do they want? What is essential? What is not-so-essential? Prioritise them. Use those cringe agile models -- they work .</li> <li>https://publicagile.org/agile-playbook/agile-planning/100-dollar-test/</li> <li>https://www.atlassian.com/agile/product-management/requirements</li> <li>Scope. Keep things simple. You have to consider the experience of the volunteers. You will suck at this the first time you're doing it.</li> <li>Who are the users of the app?</li> <li>If there are multiple types consider their user journey. e.g. Is there an admin and regular user? Do you need to consider permissions?</li> <li>Will there both mobile and desktop users?</li> <li>Also make user stories if you need to -- they're particularly useful for onboarding volunteers.</li> <li>What is the final product? Is it a website? Is it a PWA? PWAs are a good alternative to mobile apps because they're more accessible for developers and we can dodge the $99 fee Apple has to put an app on the App Store.</li> <li>What should it look like? Ask if they have particular branding, or a specific style. This is also where you need to consider the users of the app. Are they children or the elderly?</li> <li>What's their budget? This affects your deployment options.</li> <li>What about after handover? Do they have a tech team to continue maintaining it? Would they be happy to hire some of the volunteers after to continue working on it?</li> </ul> <p>Finally and most importantly, BE DECISIVE. Clients will often throw around ideas or come to you with a vague notion of what they want. It's your job as a tech lead (and the project manager's) to turn it into something concrete. If they can't decide, decide for them. Give a recommendation, explain your reasoning and have CONVICTION. If you make the wrong decision, say it and see what you can do to recalibrate.</p>"},{"location":"projects/planning/#architecting","title":"Architecting","text":""},{"location":"projects/planning/#erd","title":"ERD","text":"<p>Easiest one to knock out after getting your requirements is making an ERD. It gets you thinking about the data flow, and it can readily be turned into a database schema. The simpler you can make it (or negotiate it), the easier time volunteers will have. Be aware of the nice-to-haves from your requirements doc, but try to keep them out at this stage. Focus on the bare functionality you need to have a functional app -- you can can always refine it later.</p>"},{"location":"projects/planning/#userapi-flows","title":"User/API Flows","text":"<p>Consider creating a sequence diagram with mermaid or some other tool if a certain part of the app is complex. An ideal project will be simple enough that the Figma design will cover it, but if you have the time, feel free to do so.</p>"},{"location":"projects/planning/#tech-stack","title":"Tech Stack","text":"<p>Pick a tech stack! I strongly recommend using one that is already in the GitHub repo templates. For more information about choosing your own, see Picking a New Stack.</p>"},{"location":"projects/planning/#repo-setup","title":"Repo Setup","text":"<p>This should be straightforward unless you're setting one up from scratch, as everything is done for you. Just make sure to create a GitHub team under the <code>codersforcauses</code> org and invite all the volunteers. Then configure the repo to give write access to them. You also want to make sure merging to main without approval and a passing CI is blocked and pushing directly to main is blocked.</p> <p>Start adding some GitHub issues to the repo. Look at past projects for inspiration. Usually it goes design, navbar, DB schema, homepage, authentication, sign-up, etc...</p>"},{"location":"projects/planning/#figma","title":"Figma","text":"<p>If you've done everything so far you're already doing quite well. You don't have to get fully into the design, but make sure you have an idea of the colour palette you'll be using and a rough vibe of what it'll look like. Most of this work can be left to the volunteers, but if you're pressed for time (like during Winter projects) you can do it yourselves. A pre-done Figma design is probably the most helpful for getting volunteers to start coding.</p>"},{"location":"rants/","title":"Rants","text":"<p>These are not so much rants as they should be more a knowledge dump of thoughts. Sometimes, it's too much effort to condense our thoughts into a formal document. Put personal experiences, or things that don't necessarily fit into the other pages here. And keep it tame .</p>"},{"location":"stack/","title":"Tech Stack","text":"<ul> <li>Picking a New Stack</li> <li>Docker</li> <li>Devcontainers</li> </ul>"},{"location":"stack/devcontainers/","title":"Devcontainers","text":""},{"location":"stack/devcontainers/#background","title":"Background","text":""},{"location":"stack/docker/","title":"Docker","text":"<p>Use it.</p>"},{"location":"stack/new-stack/","title":"Picking a New Stack","text":""},{"location":"workshops/","title":"Workshops","text":"<p>Workshops are a great way to teach students new skills and one of the easier events to run during the semester.</p> <ul> <li>Running Existing Workshops</li> <li>Running New Workshops</li> </ul>"},{"location":"workshops/existing-workshops/","title":"Running Existing Workshops","text":"<p>By nature of operating out of a Uni, a lot of things can be reused. For example, the Uni still refuses to teach Git in first year, so it's often a great starter workshop to the new year. A good majority of them are on the workshops site.</p>"},{"location":"workshops/existing-workshops/#presentations","title":"Presentations","text":"<p>Most workshops come with a presentation to formally introduce attendees to the topic. They're usually in the Canva and sometimes Google Drive. Good luck...</p>"},{"location":"workshops/existing-workshops/#repo-templates","title":"Repo Templates","text":"<p>Some workshop activities (like the Git one) have a GitHub repo template to make it easier to set up stuff. You can find them on our GitHub. If a workshop doesn't have an activity already, please make one!</p>"},{"location":"workshops/existing-workshops/#update-the-workshops-site","title":"Update the Workshops site","text":"<p>You can simply copy the workshop and paste it into a new section (e.g. Summer 2024/2025), then update the <code>mkdocs.yml</code>.</p>"},{"location":"workshops/new-workshops/","title":"Creating and Running a Workshop from Scratch","text":""}]}